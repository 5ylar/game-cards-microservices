version: "3"
services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    healthcheck:
      test: nc -z localhost 5672
      timeout: 30s
      interval: 10s
      retries: 5
    restart: always
    expose: 
    - 5672
    # ports:
    #     - 5672:5672
    #     - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: gamecards
      RABBITMQ_DEFAULT_PASS: mygamecardspassword
    volumes:
        - ./docker-volumes/rabbitmq/data/:/var/lib/rabbitmq/
        - ./docker-volumes/rabbitmq/log/:/var/log/rabbitmq

  postgres:
    image: postgres:13.3
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "game_cards", "-U", "gamecards" ]
      timeout: 5s
      interval: 6s
      retries: 5
    restart: always
    environment:
      POSTGRES_USER: gamecards
      POSTGRES_PASSWORD: mygamecardspassword
      POSTGRES_DB: game_cards
      PGDATA: /data/postgres
    expose: 
    - 5432
    # ports:
    #   - "5432:5432"
    volumes:
        - ./docker-volumes/postgres/data/:/data/postgres

  redis:
    image: 'bitnami/redis:6.0.14'
    healthcheck:
      test: redis-cli ping
      timeout: 30s
      interval: 10s
      retries: 5
    restart: always
    environment:
      REDIS_PASSWORD: mygamecardspassword
    expose: 
    - 6379
    # ports:
    #   - "6379:6379"
    volumes:
      - ./docker-volumes/redis/data:/bitnami/redis/data

  db_migrations:
    depends_on: 
      - postgres
    image: mkbucc/shmig:latest
    command: -t postgresql -d game_cards up
    restart: on-failure
    environment:
      LOGIN: gamecards 
      PASSWORD: mygamecardspassword 
      HOST: "postgres"
      PORT: 5432
    volumes:
      - $PWD/migration/migrations:/sql

  result_consumer:
    depends_on: 
      - rabbitmq
      - postgres
      - db_migrations
    build: 
      context: services/game-matching-cards-summary
      args:
        CMD_DIR: result-consumer
    restart: always
    environment:
      DB_HOST: postgres
      DB_USER: gamecards
      DB_PASSWORD: mygamecardspassword
      DB_NAME: game_cards
      DB_PORT: 5432
      DB_SSL_MODE: "disable"
      DB_TIMEZONE: Asia/Bangkok
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: gamecards
      RABBITMQ_PASSWORD: mygamecardspassword
      RABBITMQ_PORT: 5672

  summary_server:
    depends_on: 
      - postgres
      - db_migrations
    build: 
      context: services/game-matching-cards-summary
      args:
        CMD_DIR: summary-server
    # healthcheck:
    #   test: curl -f  http://localhost:80/healthz || exit 1
    #   timeout: 30s
    #   interval: 10s
    #   retries: 5
    restart: always
    # ports:
    #   - 8081:80
    expose: 
    - 80
    environment:
      PORT: 80
      DB_HOST: postgres
      DB_USER: gamecards
      DB_PASSWORD: mygamecardspassword
      DB_NAME: game_cards
      DB_PORT: 5432
      DB_SSL_MODE: "disable"
      DB_TIMEZONE: Asia/Bangkok

  game_cards_server:
    depends_on: 
      - rabbitmq
      - redis
    build: 
      context: services/game-matching-cards
    healthcheck:
      test: curl -f  http://localhost:80/healthz || exit 1
      timeout: 30s
      interval: 10s
      retries: 5
    restart: always
    # ports:
    #   - 8080:80
    expose: 
    - 80
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: mygamecardspassword
      REDIS_DB: 0
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: gamecards
      RABBITMQ_PASSWORD: mygamecardspassword

  api_gateway:
    depends_on: 
    - game_cards_server
    - summary_server
    image: nginx:1.13
    healthcheck:
      test: service nginx status || exit 1
      timeout: 30s
      interval: 10s
      retries: 10
    restart: always
    ports:
      - 9000:80
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf

  web_client:
    depends_on: 
      - api_gateway
    build: 
      context: services/web-client
      args: 
        BASE_GAME_MATCHING_CARDS_URL: http://localhost:9000
        BASE_GAME_MATCHING_CARDS_URL_SSR: http://api_gateway:80
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1
      timeout: 30s
      interval: 10s
      retries: 5
    restart: always
    ports:
      - 3001:3000



